61. Produce all combinations of salespeople and customer names such that the former precedes the latter alphabetically, and the latter has a rating of less than 200. 
mysql>>
select * from customer a, salespeople b where a.snum=b.snum;
select b.sname, a.cname, a.rating from customer a, salespeople b where a.snum=b.snum and a.rating < 200 and b.sname < a.cname;

62. List all Salespeople’s names and the Commission they have earned. 
mysql>>
select c.sname, a.amt, b.cname from orders a, customer b, salespeople c where a.cnum=b.cnum and b.snum = c.snum;
select c.sname, c.comm, a.amt, b.cname from orders a, customer b, salespeople c where a.cnum=b.cnum and b.snum = c.snum;
select c.sname, (c.comm*a.amt) 'commission', b.cname from orders a, customer b, salespeople c where a.cnum=b.cnum and b.snum = c.snum;
select c.sname, sum(c.comm*a.amt) 'totalcomm' from salespeople c, orders a, customer b where a.cnum=b.cnum and b.snum = c.snum group by c.sname;

63. Write a query that produces the names and cities of all customers with the same rating as Hoffman. Write the query using Hoffman’s CNUM rather than his rating, so that it would still be usable if his rating changed. 
mysql>>
select rating from customer where cname ='Hoffman';
select a.cname, a.city from customer a where rating = (select rating from customer b where cname='Hoffman');

64. Find all salespeople for whom there are customers that follow them in alphabetical order. 
mysql>>
select a.sname,b.cname from salespeople a, customer b where b.snum=a.snum;

select a.sname,b.cname from salespeople a, customer b where b.snum=a.snum and a.sname < b.cname;

select distinct(a.sname) from salespeople a, customer b where b.snum=a.snum and a.sname < b.cname;

65. Write a query that produces the names and ratings of all customers of all who have above average orders. 
mysql>>
select avg(amt) from orders;

select b.cname, b.rating, a.amt from orders a, customer b where a.cnum=b.cnum and a.amt > (select avg(amt) from orders);

select distinct(b.cname), b.rating from orders a, customer b where a.cnum=b.cnum and a.amt > (select avg(amt) from orders);

66. Find the SUM of all purchases from the Orders table. 
mysql>>
select sum(amt) 'Sum of all purchases' from orders;

67. Write a SELECT command that produces the order number, amount and date for all rows in the order table. 
mysql>>
select onum,amt,odate from orders;

68. Count the number of nonNULL rating fields in the Customers table (including repeats). 
mysql>>
select count(rating) from customer where rating is not null;

69. Write a query that gives the names of both the salesperson and the customer for each order after the order number. 
mysql>>
select a.onum, b.sname, c.cname from orders a , salespeople c, customer b where a.cnum= b.cnum and b.snum= c.snum;

70. List the commissions of all salespeople servicing customers in London. 
mysql>>
select distinct(b.sname), b.comm from customer a, salespeople b where a.snum=b.snum and a.city='London';

71. Write a query using ANY or ALL that will find all salespeople who have no customers located in their city. 
mysql>>
select * from customer a, salespeople b where a.snum=b.snum;

select * from salespeople a, customer b where a.snum=b.snum and a.city != ANY (select city from customer c where a.snum=c.snum and c.city=b.city);

72. Write a query using the EXISTS operator that selects all salespeople with customers located in their cities who are not assigned to them. 
mysql>>
select * from salespeople a where exists (select * from customer b where b.city=a.city and b.snum!=a.snum);

***73. Write a query that selects all customers serviced by Peel or Motika. (Hint : The SNUM field relates the two tables to one another.) 
mysql>>
select snum from salespeople where sname= 'Peel' or sname ='Motika';

select * from customers a, salespeople b where a.snum= b.snum;
select * from customers a, salespeople b where a.snum = b.snum and (select snum from salespeople where sname= 'Peel' or sname ='Motika');

74. Count the number of salespeople registering orders for each day. (If a salesperson has more than one order on a given day, he or she should be counted only once.) 
mysql>>
select a.odate, a.onum, b.snum from orders a, customer b where a.cnum=b.cnum order by a.odate;

select a.odate, count(distinct(b.snum)) from orders a, customer b where a.cnum=b.cnum group by a.odate;

75. Find all orders attributed to salespeople in London. 
mysql>>
select a.onum,c.city from orders a, customer b, salespeople c where a.cnum=b.cnum and b.snum=c.snum and c.city='London';

76. Find all orders by customers not located in the same cities as their salespeople. 
mysql>>
select a.onum, b.city, d.city from orders a , customers b, salespeople d where a.cnum=b.cnum and b.snum= d.snum and b.city!=d.city;

77. Find all salespeople who have customers with more than one current order. 
mysql>>
select a.cnum, count(*) 'Count' from orders a, customer b, salespeople c where a.cnum=b.cnum and b.snum=c.snum group by a.cnum having count(*) > 1;

select c.sname from orders a, customer b, salespeople c where a.cnum=b.cnum and b.snum=c.snum group by a.cnum having Count > 1;

select distinct(c.snum), c.sname from orders a, customer b, salespeople c where a.cnum=b.cnum and b.snum=c.snum group by a.cnum having Count > 1;

78. Write a query that extracts from the Customers table every customer assigned to a salesperson who currently has at least one other customer (besides the customer being selected) with orders in the Orders table. 
mysql>>
select * from orders a, customer b where a.cnum=b.cnum;
select b.snum, count(a.cnum) from orders a, customer b, where a.cnum=b.cnum group by b.snum;
select b.snum, count(distinct(a.cnum))'Count' from orders a, customer b, where a.cnum=b.cnum group by b.snum having Count >1;
select * from customer where snum in(select b.snum, count(distinct(a.cnum))'Count' from orders a, customer b, where a.cnum=b.cnum group by b.snum having Count >1); 

79. Write a query that selects all customers whose names begin with ‘C’. 
mysql>>
select * from customers where cname='C%';

80. Write a query on the Customers table that will find the highest rating in each city. Put the output in this form : for the city (city) the highest rating is : (rating). 
mysql>>
select city, max(rating) 'Rating' from customer group by city;   